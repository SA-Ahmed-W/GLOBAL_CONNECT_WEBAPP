        // <div className="flex items-center justify-center h-screen bg-gray-100">
        //     <div className="flex flex-col items-center space-y-4">
        //         <div className="flex space-x-4">
        //             <div className='flex flex-col items-center'>
        //                 <h1>Local Stream</h1>
        //                 <video ref={localVideoRef} autoPlay muted className="w-1/2 border rounded" />
        //             </div>
        //             <div className='flex flex-col items-center'>
        //                 <h1>Remote Stream</h1>
        //                 <video ref={remoteVideoRef} autoPlay className="w-1/2 border rounded" />
        //             </div>
        //         </div>
        //         <button onClick={endCall} className="mt-4 p-2 bg-red-500 text-white rounded hover:bg-red-600">
        //             End Call
        //         </button>
        //     </div>
        // </div>















=================

// // src/pages/VideoCall.jsx
// import React, { useEffect, useRef, useState } from 'react';
// import { useNavigate, useLocation } from 'react-router-dom';
// import { db } from '../config/firebase';
// import { doc, updateDoc, onSnapshot, deleteDoc, arrayUnion } from 'firebase/firestore';

// const VideoCall = () => {
//     const [peerConnection, setPeerConnection] = useState(null);
//     const [localStream, setLocalStream] = useState(null);
//     const [remoteStream, setRemoteStream] = useState(new MediaStream());
//     const localVideoRef = useRef(null);
//     const remoteVideoRef = useRef(null);
//     const navigate = useNavigate();
//     const location = useLocation();

//     const callId = location.state?.callId;
//     const isCaller = location.state?.isCaller;

//     useEffect(() => {
//         if (!callId) return;

//         initializeCall();

//         return () => cleanUpCall();
//     }, [callId, isCaller, navigate]);

//     const initializeCall = async () => {
//         const pc = createPeerConnection();
//         setPeerConnection(pc);

//         await setCallStatus('ongoing');

//         try {
//             await setupLocalStream(pc);
//             setupRemoteStream(pc);  // Pass the peer connection
//             setupICECandidateHandling(pc);
//             setupFirestoreListeners(pc);
//             if (isCaller) await createAndSendOffer(pc);
//         } catch (error) {
//             console.log("error while initailizing the call", error);
//         }

//         listenForCallEnded(callId);
//     };

//     const createPeerConnection = () => {
//         const pc = new RTCPeerConnection({
//             iceServers: [{
//                 urls: [
//                     'stun:stun.l.google.com:19302',
//                     'stun:global.stun.twilio.com:3478'
//                 ]
//             }]
//         });

//         pc.ontrack = (event) => {
//             console.log("Received remote track:", event.streams[0]);
//             event.streams[0].getTracks().forEach(track => {
//                 if (!remoteStream.getTracks().includes(track)) {
//                     remoteStream.addTrack(track);
//                 }
//             });
//             remoteVideoRef.current.srcObject = remoteStream;
//         };

//         return pc;
//     };


//     const setCallStatus = async (status) => {
//         await updateDoc(doc(db, 'calls', callId), { status });
//     };

//     const setupLocalStream = async (pc) => {
//         try {
//             const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
//             setLocalStream(stream);
//             localVideoRef.current.srcObject = stream;
//             stream.getTracks().forEach(track => pc.addTrack(track, stream));  // Pass 'stream' here directly
//         } catch (error) {
//             console.error("Error accessing media devices:", error);
//         }
//     };



//     const setupRemoteStream = (pc) => {
//         remoteVideoRef.current.srcObject = remoteStream;
//         setRemoteStream(remoteStream);
//     };

//     const setupICECandidateHandling = (pc) => {
//         pc.onicecandidate = async (event) => {
//             if (event.candidate) {
//                 const candidateField = isCaller ? 'callerCandidates' : 'receiverCandidates';
//                 await updateDoc(doc(db, 'calls', callId), {
//                     [candidateField]: arrayUnion(event.candidate.toJSON()),
//                 });
//             }
//         };
//     };

//     const setupFirestoreListeners = (pc) => {
//         const callDoc = doc(db, 'calls', callId);

//         onSnapshot(callDoc, async (snapshot) => {
//             const data = snapshot.data();
//             if (!data) return;

//             if (isCaller && data.answer && !pc.currentRemoteDescription) {
//                 await pc.setRemoteDescription(new RTCSessionDescription(data.answer));
//             } else if (!isCaller && data.offer && !pc.currentRemoteDescription) {
//                 await pc.setRemoteDescription(new RTCSessionDescription(data.offer));
//                 const answer = await pc.createAnswer();
//                 await pc.setLocalDescription(answer);
//                 await updateDoc(callDoc, { answer: { type: answer.type, sdp: answer.sdp } });
//             }

//             const candidates = data[isCaller ? 'receiverCandidates' : 'callerCandidates'];
//             if (candidates && Array.isArray(candidates)) {
//                 for (const candidate of candidates) {
//                     try {
//                         await pc.addIceCandidate(new RTCIceCandidate(candidate));
//                     } catch (error) {
//                         console.error("Error adding received ICE candidate", error);
//                     }
//                 }
//             }
//         });
//     };


//     const createAndSendOffer = async (pc) => {
//         try {
//             const offerDesp = await pc.createOffer();
//             await pc.setLocalDescription(offerDesp);
//             await updateDoc(doc(db, 'calls', callId), { offer: { sdp: offerDesp.sdp, type: offerDesp.type } });
//         } catch (error) {
//             console.log("error while creating and sending offer ", error);

//         }

//     };

//     const listenForCallEnded = (callId) => {
//         onSnapshot(doc(db, "calls", callId), (snapshot) => {
//             const callData = snapshot.data();
//             if (callData?.status === "ended") {
//                 cleanUpCall();
//                 setTimeout(async () => await deleteDoc(doc(db, 'calls', callId)), 5000);
//                 navigate('/');

//             }
//         });
//     };
//     const cleanUpCall = () => {
//         if (peerConnection) {
//             peerConnection.close();
//             setPeerConnection(null);
//         }
//         if (localStream) {
//             localStream.getTracks().forEach(track => track.stop());  // Stop each track to release the camera and mic
//             setLocalStream(null);
//         }
//         if (remoteStream) {
//             remoteStream.getTracks().forEach(track => track.stop());  // Stop any remote tracks if needed
//             setRemoteStream(null);
//         }
//         if (localVideoRef.current) {
//             localVideoRef.current.srcObject = null;  // Clear the video element source
//         }
//         if (remoteVideoRef.current) {
//             remoteVideoRef.current.srcObject = null;  // Clear the video element source
//         }
//     };


//     const endCall = async () => {
//         try {
//             cleanUpCall()
//             await updateDoc(doc(db, 'calls', callId), { status: 'ended' });
//             setTimeout(async () => await deleteDoc(doc(db, 'calls', callId)), 5000);
//             navigate('/');
//         } catch (error) {
//             console.error("Error ending call:", error);
//         }
//     };

//     return (
//         <div className="p-6 bg-white rounded shadow-lg max-w-md mx-auto space-y-4 w-full h-screen">
//             <h2 className="text-2xl font-bold">Video Call</h2>

//             <div className="relative w-full h-full">
//                 {/* Remote video (large) */}

//                 <video
//                     ref={remoteVideoRef}
//                     autoPlay
//                     playsInline
//                     className="w-full h-80 rounded-lg mb-4" />

//                 {/* Local video (small) */}
//                 <video
//                     ref={localVideoRef}
//                     autoPlay
//                     playsInline
//                     muted
//                     className="absolute bottom-4 right-4 w-32 h-32 rounded-2xl"
//                 />
//             </div>
//             {/* End call button */}
//             <button
//                 onClick={endCall}
//                 className="w-full py-2 rounded bg-red-600 text-white hover:bg-red-700"
//             >
//                 End Call
//             </button>
//         </div>
//     );
// };

// export default VideoCall;



// src/pages/VideoCall.jsx
import React, { useEffect, useRef, useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { db } from '../config/firebase';
import { doc, updateDoc, onSnapshot, deleteDoc, arrayUnion } from 'firebase/firestore';

const VideoCall = () => {
    const [peerConnection, setPeerConnection] = useState(null);
    const [localStream, setLocalStream] = useState(null);
    const [remoteStream] = useState(new MediaStream());
    const localVideoRef = useRef(null);
    const remoteVideoRef = useRef(null);
    const navigate = useNavigate();
    const location = useLocation();

    const callId = location.state?.callId;
    const isCaller = location.state?.isCaller;
    const unsubscribeCallbacks = useRef([]);

    useEffect(() => {
        if (!callId) return;

        initializeCall();

        return () => cleanUpCall();
    }, [callId, isCaller, navigate]);

    const initializeCall = async () => {
        if (peerConnection) return;

        const pc = createPeerConnection();
        setPeerConnection(pc);

        await setCallStatus('ongoing');

        try {
            await setupLocalStream(pc);
            setupRemoteStream();  // Sets remote stream for the peer connection
            setupICECandidateHandling(pc);
            setupFirestoreListeners(pc);
            if (isCaller) await createAndSendOffer(pc);
        } catch (error) {
            console.error("Error while initializing the call:", error);
        }

        listenForCallEnded(callId);
    };

    const createPeerConnection = () => {
        const pc = new RTCPeerConnection({
            iceServers: [{
                urls: [
                    'stun:stun.l.google.com:19302',
                    'stun:global.stun.twilio.com:3478'
                ]
            }]
        });

        pc.ontrack = (event) => {
            console.log("Received remote track:", event.streams[0]);
            event.streams[0].getTracks().forEach(track => {
                if (!remoteStream.getTracks().includes(track)) {
                    remoteStream.addTrack(track);
                }
            });
            remoteVideoRef.current.srcObject = remoteStream;
        };

        return pc;
    };

    const setCallStatus = async (status) => {
        try {
            await updateDoc(doc(db, 'calls', callId), { status });
            console.log(`Call status set to ${status}`);
        } catch (error) {
            console.error("Error updating call status:", error);
        }
    };

    const setupLocalStream = async (pc) => {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
            setLocalStream(stream);
            localVideoRef.current.srcObject = stream;
            console.log("Local stream set:", stream);

            stream.getTracks().forEach(track => {
                pc.addTrack(track, stream);
                console.log("Added local track:", track);
            });
        } catch (error) {
            console.error("Error accessing media devices:", error);
        }
    };

    const setupRemoteStream = () => {
        remoteVideoRef.current.srcObject = remoteStream;
        console.log("Remote stream initialized");
    };

    const setupICECandidateHandling = (pc) => {
        pc.onicecandidate = async (event) => {
            if (event.candidate) {
                const candidateField = isCaller ? 'callerCandidates' : 'receiverCandidates';
                try {
                    await updateDoc(doc(db, 'calls', callId), {
                        [candidateField]: arrayUnion(event.candidate.toJSON()),
                    });
                    console.log("ICE candidate sent:", event.candidate);
                } catch (error) {
                    console.error("Error handling ICE candidate:", error);
                }
            }
        };
    };

    const setupFirestoreListeners = (pc) => {
        const callDoc = doc(db, 'calls', callId);

        const unsubscribe = onSnapshot(callDoc, async (snapshot) => {
            const data = snapshot.data();
            if (!data) return;

            if (isCaller && data.answer && !pc.currentRemoteDescription) {
                console.log("Setting remote description with answer:", data.answer);
                await pc.setRemoteDescription(new RTCSessionDescription(data.answer));
            } else if (!isCaller && data.offer && !pc.currentRemoteDescription) {
                console.log("Setting remote description with offer:", data.offer);
                await pc.setRemoteDescription(new RTCSessionDescription(data.offer));
                
                const answer = await pc.createAnswer();
                await pc.setLocalDescription(answer);
                console.log("Created and set local description with answer:", answer);

                await updateDoc(callDoc, { answer: { type: answer.type, sdp: answer.sdp } });
            }

            const candidates = data[isCaller ? 'receiverCandidates' : 'callerCandidates'];
            if (candidates && Array.isArray(candidates)) {
                for (const candidate of candidates) {
                    try {
                        console.log("Adding remote ICE candidate:", candidate);
                        await pc.addIceCandidate(new RTCIceCandidate(candidate));
                    } catch (error) {
                        console.error("Error adding received ICE candidate", error);
                    }
                }
            }
        });

        unsubscribeCallbacks.current.push(unsubscribe);
    };

    const createAndSendOffer = async (pc) => {
        try {
            const offer = await pc.createOffer();
            await pc.setLocalDescription(offer);
            console.log("Created and set local description with offer:", offer);

            await updateDoc(doc(db, 'calls', callId), { offer: { sdp: offer.sdp, type: offer.type } });
        } catch (error) {
            console.error("Error creating and sending offer:", error);
        }
    };

    const listenForCallEnded = (callId) => {
        const unsubscribe = onSnapshot(doc(db, "calls", callId), (snapshot) => {
            const callData = snapshot.data();
            if (callData?.status === "ended") {
                cleanUpCall();
                setTimeout(async () => await deleteDoc(doc(db, 'calls', callId)), 5000);
                navigate('/');
            }
        });

        unsubscribeCallbacks.current.push(unsubscribe);
    };

    const cleanUpCall = async () => {
        unsubscribeCallbacks.current.forEach(unsubscribe => unsubscribe());

        if (peerConnection) {
            peerConnection.close();
            setPeerConnection(null);
            console.log("Peer connection closed");
        }

        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
            setLocalStream(null);
            console.log("Local stream stopped");
        }

        remoteStream.getTracks().forEach(track => track.stop());
        console.log("Remote stream stopped");
        
        if (localVideoRef.current) localVideoRef.current.srcObject = null;
        if (remoteVideoRef.current) remoteVideoRef.current.srcObject = null;
    };

    const endCall = async () => {
        try {
            await updateDoc(doc(db, 'calls', callId), { status: 'ended' });
            cleanUpCall();
            setTimeout(async () => await deleteDoc(doc(db, 'calls', callId)), 5000);
            navigate('/');
        } catch (error) {
            console.error("Error ending call:", error);
        }
    };

    return (
        <div className="p-6 bg-white rounded shadow-lg max-w-md mx-auto space-y-4 w-full h-screen">
            <h2 className="text-2xl font-bold">Video Call</h2>

            <div className="relative w-full h-full">
                <video ref={remoteVideoRef} autoPlay playsInline className="w-full h-80 rounded-lg mb-4" />
                <video ref={localVideoRef} autoPlay playsInline muted className="absolute bottom-4 right-4 w-32 h-32 rounded-2xl" />
            </div>

            <button onClick={endCall} className="w-full py-2 rounded bg-red-600 text-white hover:bg-red-700">
                End Call
            </button>
        </div>
    );
};

export default VideoCall;